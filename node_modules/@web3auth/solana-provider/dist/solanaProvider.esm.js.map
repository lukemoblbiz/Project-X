{"version":3,"file":"solanaProvider.esm.js","sources":["../src/rpc/JrpcClient.ts","../src/rpc/solanaRpcMiddlewares.ts","../src/providers/injectedProviders/base/baseInjectedProvider.ts","../src/providers/injectedProviders/base/providerHandlers.ts","../src/providers/injectedProviders/injectedProviderProxy.ts","../src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","../src/providers/injectedProviders/slope/providerHandlers.ts","../src/providers/injectedProviders/slope/slopeInjectedProvider.ts","../src/providers/injectedProviders/solflare/providerHandlers.ts","../src/providers/injectedProviders/solflare/solflareInjectedProvider.ts","../src/providers/injectedProviders/torus/providerHandlers.ts","../src/providers/injectedProviders/torus/torusInjectedProvider.ts","../src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","../src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","../src/solanaWallet.ts"],"sourcesContent":["import { createFetchMiddleware } from \"@toruslabs/base-controllers\";\nimport {\n  Block,\n  JRPCEngineEndCallback,\n  JRPCEngineNextCallback,\n  JRPCMiddleware,\n  JRPCRequest,\n  JRPCResponse,\n  mergeMiddleware,\n} from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig } from \"@web3auth/base\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, string> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"solana_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(\n  providerConfig: Omit<CustomChainConfig, \"chainNamespace\">\n): JRPCMiddleware<unknown, Omit<CustomChainConfig, \"chainNamespace\">> {\n  return (\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<Omit<CustomChainConfig, \"chainNamespace\">>,\n    next: JRPCEngineNextCallback,\n    end: JRPCEngineEndCallback\n  ) => {\n    if (req.method === \"solana_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  const { chainId } = providerConfig;\n\n  return mergeMiddleware([\n    createChainIdMiddleware(chainId) as JRPCMiddleware<unknown, unknown>,\n    createProviderConfigMiddleware(providerConfig) as JRPCMiddleware<unknown, unknown>,\n  ]);\n}\n\nexport function createJsonRpcClient(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  fetchMiddleware: JRPCMiddleware<string[], Block>;\n} {\n  const { rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const networkMiddleware = mergeMiddleware([createConfigMiddleware(providerConfig), fetchMiddleware as JRPCMiddleware<unknown, unknown>]);\n  return { networkMiddleware, fetchMiddleware };\n}\n","import { createAsyncMiddleware, JRPCMiddleware, JRPCRequest, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nimport { TransactionOrVersionedTransaction } from \"../interface\";\n\nexport interface IProviderHandlers {\n  requestAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getPrivateKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signTransaction: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>) => Promise<TransactionOrVersionedTransaction>;\n  signAllTransactions: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>) => Promise<TransactionOrVersionedTransaction[]>;\n  signAndSendTransaction: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>) => Promise<{ signature: string }>;\n  getSecretKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signMessage: (req: JRPCRequest<{ message: Uint8Array; display?: string }>) => Promise<Uint8Array>;\n}\n\nexport function createGetAccountsMiddleware({ getAccounts }: { getAccounts: IProviderHandlers[\"getAccounts\"] }): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"getAccounts\") return next();\n\n    if (!getAccounts) throw new Error(\"WalletMiddleware - opts.getAccounts not provided\");\n    // This calls from the prefs controller\n    const accounts = await getAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createRequestAccountsMiddleware({\n  requestAccounts,\n}: {\n  requestAccounts: IProviderHandlers[\"requestAccounts\"];\n}): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"requestAccounts\") return next();\n\n    if (!requestAccounts) throw new Error(\"WalletMiddleware - opts.requestAccounts not provided\");\n    // This calls the UI login function\n    const accounts = await requestAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createGenericJRPCMiddleware<T, U>(targetMethod: string, handler: (req: JRPCRequest<T>) => Promise<U>): JRPCMiddleware<T, U> {\n  return createAsyncMiddleware<T, U>(async (request, response, next) => {\n    const { method } = request;\n    if (method !== targetMethod) return next();\n\n    if (!handler) throw new Error(`WalletMiddleware - ${targetMethod} not provided`);\n\n    const result = await handler(request);\n\n    response.result = result;\n    return undefined;\n  });\n}\n\nexport function createSolanaMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown> {\n  const { getAccounts, requestAccounts, signTransaction, signAndSendTransaction, signAllTransactions, signMessage, getPrivateKey, getSecretKey } =\n    providerHandlers;\n\n  return mergeMiddleware([\n    createRequestAccountsMiddleware({ requestAccounts }),\n    createGetAccountsMiddleware({ getAccounts }),\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction }, TransactionOrVersionedTransaction>(\n      \"signTransaction\",\n      signTransaction\n    ) as JRPCMiddleware<unknown, unknown>,\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction }, { signature: string }>(\n      \"signAndSendTransaction\",\n      signAndSendTransaction\n    ) as JRPCMiddleware<unknown, unknown>,\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction[] }, TransactionOrVersionedTransaction[]>(\n      \"signAllTransactions\",\n      signAllTransactions\n    ) as JRPCMiddleware<unknown, unknown>,\n    createGenericJRPCMiddleware<{ message: Uint8Array }, Uint8Array>(\"signMessage\", signMessage) as JRPCMiddleware<unknown, unknown>,\n    createGenericJRPCMiddleware<void, string>(\"solanaPrivateKey\", getPrivateKey) as JRPCMiddleware<unknown, unknown>,\n    createGenericJRPCMiddleware<void, string>(\"private_key\", getPrivateKey) as JRPCMiddleware<unknown, unknown>,\n    createGenericJRPCMiddleware<void, string>(\"solanaSecretKey\", getSecretKey) as JRPCMiddleware<unknown, unknown>,\n  ]);\n}\nexport interface AddSolanaChainParameter {\n  chainId: string; // A 0x-prefixed hexadecimal string\n  chainName: string;\n  nativeCurrency: {\n    name: string;\n    symbol: string; // 2-6 characters long\n    decimals: 18;\n  };\n  rpcUrls: string[];\n  blockExplorerUrls?: string[];\n}\n\nexport interface IChainSwitchHandlers {\n  addNewChainConfig: (req: JRPCRequest<AddSolanaChainParameter>) => Promise<void>;\n  switchSolanaChain: (req: JRPCRequest<{ chainId: string }>) => Promise<void>;\n}\nexport function createChainSwitchMiddleware({ addNewChainConfig, switchSolanaChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([\n    createGenericJRPCMiddleware<AddSolanaChainParameter, void>(\"addSolanaChain\", addNewChainConfig) as JRPCMiddleware<unknown, unknown>,\n    createGenericJRPCMiddleware<{ chainId: string }, void>(\"switchSolanaChain\", switchSolanaChain) as JRPCMiddleware<unknown, unknown>,\n  ]);\n}\n\nexport interface IAccountHandlers {\n  updatePrivatekey: (req: JRPCRequest<{ privateKey: string }>) => Promise<void>;\n}\nexport function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([\n    createGenericJRPCMiddleware<{ privateKey: string }, void>(\"updateAccount\", updatePrivatekey) as JRPCMiddleware<unknown, unknown>,\n  ]);\n}\n","import { JRPCEngine, JRPCMiddleware, providerFromEngine } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, WalletLoginError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\n\nimport { createConfigMiddleware } from \"../../../rpc/JrpcClient\";\nimport { createSolanaMiddleware, IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport abstract class BaseInjectedProvider<P> extends BaseProvider<BaseProviderConfig, BaseProviderState, P> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    throw WalletLoginError.unsupportedOperation(\"Chain switching is not supported by this adapter\");\n  }\n\n  public async setupProvider(injectedProvider: P): Promise<void> {\n    const engine = new JRPCEngine();\n\n    const providerHandlers = this.getProviderHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    engine.push(solanaMiddleware);\n\n    const configMiddleware = createConfigMiddleware(this.config.chainConfig as CustomChainConfig);\n    engine.push(configMiddleware);\n\n    const injectedProviderProxy = this.getInjectedProviderProxy(injectedProvider);\n    if (injectedProviderProxy) {\n      engine.push(injectedProviderProxy);\n    }\n\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    const { chainConfig } = this.config;\n    this.update({\n      chainId: chainConfig.chainId,\n    });\n    return chainConfig.chainId || \"\";\n  }\n\n  protected getInjectedProviderProxy(_: P): JRPCMiddleware<unknown, unknown> {\n    return undefined;\n  }\n\n  protected abstract getProviderHandlers(injectedProvider: P): IProviderHandlers;\n}\n","import { rpcErrors } from \"@metamask/rpc-errors\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport bs58 from \"bs58\";\n\nimport { IBaseWalletProvider, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getBaseProviderHandlers = (injectedProvider: IBaseWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [];\n    },\n    getAccounts: async () => (injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : []),\n    getPrivateKey: async () => {\n      throw rpcErrors.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw rpcErrors.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      const transaction = await injectedProvider.signTransaction(req.params.message);\n      return transaction;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array; display?: string }>): Promise<Uint8Array> => {\n      const sigData = await injectedProvider.signMessage(req.params.message, req.params.display as \"utf8\" | \"hex\");\n      return sigData.signature;\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw rpcErrors.invalidParams(\"message\");\n      }\n      const transaction = await injectedProvider.signAllTransactions(req.params.message);\n      return transaction;\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      const txRes = await injectedProvider.signAndSendTransaction(req.params.message);\n      return { signature: txRes.signature };\n    },\n  };\n  return providerHandlers;\n};\n","import { createAsyncMiddleware, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"@toruslabs/openlogin-jrpc\";\n\nimport { InjectedProvider } from \"./interface\";\n\nexport function createInjectedProviderProxyMiddleware(provider: InjectedProvider): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (req: JRPCRequest<unknown>, res: JRPCResponse<unknown>, _next: JRPCEngineNextCallback) => {\n    const result = await provider.request(req);\n    res.result = result;\n  });\n}\n","import { JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nimport { IPhantomWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\n\nexport class PhantomInjectedProvider extends BaseInjectedProvider<IPhantomWalletProvider> {\n  protected getProviderHandlers(injectedProvider: IPhantomWalletProvider): IProviderHandlers {\n    return getBaseProviderHandlers(injectedProvider);\n  }\n\n  protected getInjectedProviderProxy(injectedProvider: IPhantomWalletProvider): JRPCMiddleware<unknown, unknown> {\n    return createInjectedProviderProxyMiddleware(injectedProvider);\n  }\n}\n","import { providerErrors, rpcErrors } from \"@metamask/rpc-errors\";\nimport { Connection, PublicKey, Transaction, VersionedTransaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\n\nimport { ISlopeProvider, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nconst isVersionTransction = (transaction: TransactionOrVersionedTransaction) =>\n  (transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction;\n\nexport const getSlopeHandlers = (injectedProvider: ISlopeProvider, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getPrivateKey: async () => {\n      throw rpcErrors.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw rpcErrors.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      const txMessage = req.params.message;\n      if (!txMessage) throw rpcErrors.invalidRequest({ message: \"Invalid transaction message\" });\n\n      const message = isVersionTransction(txMessage)\n        ? (txMessage as VersionedTransaction).message.serialize()\n        : (txMessage as Transaction).serializeMessage();\n      const { data } = await injectedProvider.signTransaction(bs58.encode(message));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, Buffer.from(signature));\n      return txMessage;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      const response = await injectedProvider.signMessage(req.params.message);\n      return bs58.decode(response.data.signature);\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      const provider = getProviderEngineProxy();\n      if (!provider) throw providerErrors.custom({ message: \"Provider is not initialized\", code: 4902 });\n      const txMessage = req.params.message;\n      if (!txMessage) throw rpcErrors.invalidRequest({ message: \"Invalid transaction message\" });\n\n      const message = isVersionTransction(txMessage)\n        ? (txMessage as VersionedTransaction).message.serialize()\n        : (txMessage as Transaction).serializeMessage();\n      const { data } = await injectedProvider.signTransaction(bs58.encode(message));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, Buffer.from(signature));\n      const chainConfig = (await provider.request<never, CustomChainConfig>({ method: \"solana_provider_config\" })) as CustomChainConfig;\n      const conn = new Connection(chainConfig.rpcTarget);\n      const res = await conn.sendRawTransaction(txMessage.serialize());\n      return { signature: res };\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw rpcErrors.invalidParams(\"message\");\n      }\n\n      const allTxns = req.params.message;\n      const { length } = allTxns;\n\n      const unsignedTx = [];\n\n      for (let i = 0; i < length; i++) {\n        const item = allTxns[i];\n        const message = isVersionTransction(item) ? (item as VersionedTransaction).message.serialize() : (item as Transaction).serializeMessage();\n        unsignedTx.push(bs58.encode(message));\n      }\n      const { msg, data } = await injectedProvider.signAllTransactions(unsignedTx);\n\n      if (!data.publicKey || data.signatures?.length !== length) throw new Error(msg);\n\n      const publicKey = new PublicKey(data.publicKey);\n\n      for (let i = 0; i < length; i++) {\n        const signature = bs58.decode(data.signatures[i]);\n        allTxns[i].addSignature(publicKey, Buffer.from(signature));\n      }\n\n      return allTxns;\n    },\n  };\n  return providerHandlers;\n};\n","import { ISlopeProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSlopeHandlers } from \"./providerHandlers\";\n\nexport class SlopeInjectedProxyProvider extends BaseInjectedProvider<ISlopeProvider> {\n  protected getProviderHandlers(injectedProvider: ISlopeProvider): IProviderHandlers {\n    return getSlopeHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import { providerErrors } from \"@metamask/rpc-errors\";\nimport { Connection } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\n\nimport { IBaseWalletProvider, SolflareWallet, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\n\nexport const getSolflareHandlers = (injectedProvider: SolflareWallet, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const solflareProviderHandlers = getBaseProviderHandlers(injectedProvider as IBaseWalletProvider);\n  solflareProviderHandlers.signAndSendTransaction = async (\n    req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>\n  ): Promise<{ signature: string }> => {\n    const provider = getProviderEngineProxy();\n    if (!provider) throw providerErrors.custom({ message: \"Provider is not initialized\", code: 4902 });\n\n    const transaction = await injectedProvider.signTransaction(req.params.message);\n    const chainConfig = (await provider.request<never, CustomChainConfig>({ method: \"solana_provider_config\" })) as CustomChainConfig;\n    const conn = new Connection(chainConfig.rpcTarget);\n    const res = await conn.sendRawTransaction(transaction.serialize());\n    return { signature: res };\n  };\n\n  solflareProviderHandlers.signMessage = async (req: JRPCRequest<{ message: Uint8Array; display?: string }>): Promise<Uint8Array> => {\n    const sigData = await injectedProvider.signMessage(req.params.message, req.params.display as \"utf8\" | \"hex\");\n    return sigData;\n  };\n  return solflareProviderHandlers;\n};\n","import { SolflareWallet } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSolflareHandlers } from \"./providerHandlers\";\n\nexport class SolflareInjectedProvider extends BaseInjectedProvider<SolflareWallet> {\n  protected getProviderHandlers(injectedProvider: SolflareWallet): IProviderHandlers {\n    return getSolflareHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import { rpcErrors } from \"@metamask/rpc-errors\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\n\nimport { ITorusWalletProvider, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getTorusHandlers = (injectedProvider: ITorusWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const accounts = await injectedProvider.request<unknown, string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getAccounts: async () => {\n      const accounts = await injectedProvider.request<unknown, string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getPrivateKey: async () => {\n      throw rpcErrors.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw rpcErrors.methodNotSupported();\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw rpcErrors.invalidParams(\"message\");\n      }\n      const message = await injectedProvider.signMessage(req.params.message);\n      return message;\n    },\n\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      if (!req.params?.message) {\n        throw rpcErrors.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.signTransaction(txMessage);\n      return response;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw rpcErrors.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.sendTransaction(txMessage);\n      return { signature: response };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw rpcErrors.invalidParams(\"message\");\n      }\n      const transactions = req.params.message;\n      const response = await injectedProvider.signAllTransactions(transactions);\n      return response;\n    },\n  };\n  return providerHandlers;\n};\n","import { providerErrors } from \"@metamask/rpc-errors\";\nimport { JRPCEngine, providerFromEngine } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, isHexStrict, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\n\nimport { ITorusWalletProvider } from \"../../../interface\";\nimport { createSolanaMiddleware } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\nimport { getTorusHandlers } from \"./providerHandlers\";\n\nexport class TorusInjectedProvider extends BaseProvider<BaseProviderConfig, BaseProviderState, ITorusWalletProvider> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    // overrides the base provider implementation\n    await this.provider.request({\n      method: \"switchSolanaChain\",\n      params: [{ chainId: params.chainId }],\n    });\n  }\n\n  public async addChain(chainConfig: CustomChainConfig): Promise<void> {\n    super.addChain(chainConfig);\n    await this.provider.request({\n      method: \"addNewChainConfig\",\n      params: [\n        {\n          chainId: chainConfig.chainId,\n          chainName: chainConfig.displayName,\n          rpcUrls: [chainConfig.rpcTarget],\n          blockExplorerUrls: [chainConfig.blockExplorer],\n          nativeCurrency: {\n            name: chainConfig.tickerName,\n            symbol: chainConfig.ticker,\n            decimals: chainConfig.decimals || 18,\n          },\n        },\n      ],\n    });\n  }\n\n  public async setupProvider(injectedProvider: ITorusWalletProvider): Promise<void> {\n    this.handleInjectedProviderUpdate(injectedProvider);\n    await this.setupEngine(injectedProvider);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this.provider) throw providerErrors.custom({ message: \"Torus solana provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n\n    const connectedChainId = await this.provider.request<never, string>({\n      method: \"solana_chainId\",\n    });\n\n    const connectedHexChainId = isHexStrict(connectedChainId.toString()) ? connectedChainId : `0x${parseInt(connectedChainId, 10).toString(16)}`;\n    if (chainId !== connectedHexChainId)\n      throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n\n    this.update({ chainId: connectedHexChainId });\n    this.emit(\"connect\", { chainId: this.state.chainId });\n    this.emit(\"chainChanged\", this.state.chainId);\n    return this.state.chainId;\n  }\n\n  private async setupEngine(injectedProvider: ITorusWalletProvider): Promise<void> {\n    const providerHandlers = getTorusHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const injectedProviderProxy = createInjectedProviderProxyMiddleware(injectedProvider);\n    const engine = new JRPCEngine();\n    engine.push(solanaMiddleware);\n    engine.push(injectedProviderProxy);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  private async handleInjectedProviderUpdate(injectedProvider: ITorusWalletProvider): Promise<void> {\n    injectedProvider.on(\"accountsChanged\", async (accounts: string[]) => {\n      this.emit(\"accountsChanged\", accounts);\n    });\n    injectedProvider.on(\"chainChanged\", async (chainId: string) => {\n      const connectedHexChainId = isHexStrict(chainId) ? chainId : `0x${parseInt(chainId, 10).toString(16)}`;\n      // Check if chainId changed and trigger event\n      this.configure({\n        chainConfig: { ...this.config.chainConfig, chainId: connectedHexChainId },\n      });\n      await this.setupProvider(injectedProvider);\n    });\n  }\n}\n","import { providerErrors, rpcErrors } from \"@metamask/rpc-errors\";\nimport { Keypair, VersionedTransaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport nacl from \"@toruslabs/tweetnacl-js\";\nimport { SafeEventEmitterProvider, WalletInitializationError } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\n\nimport { TransactionOrVersionedTransaction } from \"../../interface\";\nimport { IProviderHandlers } from \"../../rpc/solanaRpcMiddlewares\";\n\nexport async function getProviderHandlers({\n  privKey,\n  getProviderEngineProxy,\n}: {\n  privKey: string;\n  getProviderEngineProxy: () => SafeEventEmitterProvider | null;\n}): Promise<IProviderHandlers> {\n  const keyPairGenerator = (): Keypair => {\n    return Keypair.fromSecretKey(Buffer.from(privKey, \"hex\"));\n  };\n  if (typeof privKey !== \"string\") throw WalletInitializationError.invalidParams(\"privKey must be a string\");\n  const keyPair = keyPairGenerator();\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return [keyPair.publicKey.toBase58()];\n    },\n    getAccounts: async () => [keyPair.publicKey.toBase58()],\n\n    getPrivateKey: async () => privKey,\n    getSecretKey: async () => bs58.encode(keyPair.secretKey),\n\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      if (!req.params?.message) {\n        throw rpcErrors.invalidParams(\"message\");\n      }\n      const transaction = req.params.message;\n      if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n        (transaction as VersionedTransaction).sign([keyPair]);\n      } else {\n        transaction.partialSign(keyPair);\n      }\n      return transaction;\n    },\n\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw rpcErrors.invalidParams(\"message\");\n      }\n      const signedMsg = nacl.sign.detached(req.params.message, keyPair.secretKey);\n      return signedMsg;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw rpcErrors.invalidParams(\"message\");\n      }\n      const _providerEngineProxy = getProviderEngineProxy();\n      if (!_providerEngineProxy) throw providerErrors.custom({ message: \"Provider is not initialized\", code: 4902 });\n\n      const transaction = req.params.message;\n      if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n        (transaction as VersionedTransaction).sign([keyPair]);\n      } else {\n        transaction.partialSign(keyPair);\n      }\n      const sig = await _providerEngineProxy.request<[string, { encoding: string; preflightCommitment: string }], string>({\n        method: \"sendTransaction\",\n        params: [Buffer.from(transaction.serialize()).toString(\"base64\"), { encoding: \"base64\", preflightCommitment: \"confirmed\" }],\n      });\n      return { signature: sig };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw rpcErrors.invalidParams(\"message\");\n      }\n\n      const txns = req.params?.message;\n      for (const tx of txns || []) {\n        const transaction = tx;\n        if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n          (transaction as VersionedTransaction).sign([keyPair]);\n        } else {\n          transaction.partialSign(keyPair);\n        }\n      }\n      return txns;\n    },\n  };\n\n  return providerHandlers;\n}\n","import { providerErrors, rpcErrors } from \"@metamask/rpc-errors\";\nimport { getED25519Key } from \"@toruslabs/openlogin-ed25519\";\nimport { JRPCEngine, JRPCMiddleware, JRPCRequest, providerFromEngine } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\n\nimport { createJsonRpcClient } from \"../../rpc/JrpcClient\";\nimport {\n  AddSolanaChainParameter,\n  createAccountMiddleware,\n  createChainSwitchMiddleware,\n  createSolanaMiddleware,\n  IAccountHandlers,\n  IChainSwitchHandlers,\n} from \"../../rpc/solanaRpcMiddlewares\";\nimport { getProviderHandlers } from \"./solanaPrivateKeyUtils\";\n\nexport interface SolanaPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\nexport interface SolanaPrivKeyProviderState extends BaseProviderState {\n  privateKey?: string;\n}\nexport class SolanaPrivateKeyProvider extends BaseProvider<BaseProviderConfig, SolanaPrivKeyProviderState, string> {\n  constructor({ config, state }: { config: SolanaPrivKeyProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public static getProviderInstance = async (params: {\n    privKey: string;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<SolanaPrivateKeyProvider> => {\n    const providerFactory = new SolanaPrivateKeyProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.state.privateKey)\n      throw providerErrors.custom({ message: \"Private key is not found in state, plz pass it in constructor state param\", code: 4902 });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request<never, string[]>({ method: \"eth_accounts\" });\n  }\n\n  public getEd25519Key(privateKey: string): string {\n    return getED25519Key(privateKey).sk.toString(\"hex\").padStart(128, \"0\");\n  }\n\n  public async setupProvider(privKey: string): Promise<void> {\n    const providerHandlers = await getProviderHandlers({ privKey, getProviderEngineProxy: this.getProviderEngineProxy.bind(this) });\n\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n\n    const engine = new JRPCEngine();\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(this.getChainSwitchMiddleware());\n    engine.push(this.getAccountMiddleware());\n    engine.push(solanaMiddleware);\n    engine.push(networkMiddleware);\n\n    const provider = providerFromEngine(engine);\n\n    this.updateProviderEngineProxy(provider);\n\n    await this.lookupNetwork();\n  }\n\n  public async updateAccount(params: { privateKey: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw providerErrors.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const existingKey = await this._providerEngineProxy.request<never, string>({ method: \"solanaPrivateKey\" });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request<never, string[]>({ method: \"requestAccounts\" }),\n      });\n    }\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw providerErrors.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    this.configure({ chainConfig });\n    const privKey = await this._providerEngineProxy.request<never, string>({ method: \"solanaPrivateKey\" });\n    await this.setupProvider(privKey);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this._providerEngineProxy) throw providerErrors.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const health = await this._providerEngineProxy.request<[], string>({\n      method: \"getHealth\",\n      params: [],\n    });\n    const { chainConfig } = this.config;\n    if (health !== \"ok\")\n      throw WalletInitializationError.rpcConnectionError(`Failed to lookup network for following rpc target: ${chainConfig.rpcTarget}`);\n    this.update({ chainId: chainConfig.chainId });\n    if (this.state.chainId !== chainConfig.chainId) {\n      this.emit(\"chainChanged\", this.state.chainId);\n      this.emit(\"connect\", { chainId: this.state.chainId });\n    }\n    return this.state.chainId;\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addNewChainConfig: async (req: JRPCRequest<AddSolanaChainParameter>): Promise<void> => {\n        if (!req.params) throw rpcErrors.invalidParams(\"Missing request params\");\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = req.params;\n\n        if (!chainId) throw rpcErrors.invalidParams(\"Missing chainId in chainParams\");\n        if (!rpcUrls || rpcUrls.length === 0) throw rpcErrors.invalidParams(\"Missing rpcUrls in chainParams\");\n        if (!nativeCurrency) throw rpcErrors.invalidParams(\"Missing nativeCurrency in chainParams\");\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.SOLANA,\n          chainId,\n          ticker: nativeCurrency?.symbol || \"SOL\",\n          tickerName: nativeCurrency?.name || \"Solana\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n          decimals: nativeCurrency?.decimals || 9,\n        });\n      },\n      switchSolanaChain: async (req: JRPCRequest<{ chainId: string }>): Promise<void> => {\n        if (!req.params) throw rpcErrors.invalidParams(\"Missing request params\");\n        if (!req.params.chainId) throw rpcErrors.invalidParams(\"Missing chainId\");\n        await this.switchChain(req.params);\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private getAccountMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const accountHandlers: IAccountHandlers = {\n      updatePrivatekey: async (req: JRPCRequest<{ privateKey: string }>): Promise<void> => {\n        if (!req.params) throw rpcErrors.invalidParams(\"Missing request params\");\n        if (!req.params.privateKey) throw rpcErrors.invalidParams(\"Missing privateKey\");\n        const { privateKey } = req.params;\n        await this.updateAccount({ privateKey });\n      },\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n","import { IProvider, RequestArguments } from \"@web3auth/base\";\n\nimport { ISolanaWallet, TransactionOrVersionedTransaction } from \"./interface\";\n\nexport class SolanaWallet implements ISolanaWallet {\n  public provider: IProvider;\n\n  constructor(provider: IProvider) {\n    this.provider = provider;\n  }\n\n  public async requestAccounts(): Promise<string[]> {\n    const accounts = await this.provider.request<never, string[]>({\n      method: \"requestAccounts\",\n    });\n    return accounts;\n  }\n\n  public async signAndSendTransaction<T extends TransactionOrVersionedTransaction>(transaction: T): Promise<{ signature: string }> {\n    const { signature } = await this.provider.request<{ message: T }, { signature: string }>({\n      method: \"signAndSendTransaction\",\n      params: {\n        message: transaction,\n      },\n    });\n    return { signature };\n  }\n\n  public async signTransaction<T extends TransactionOrVersionedTransaction>(transaction: T): Promise<T> {\n    const signedTransaction = await this.provider.request({\n      method: \"signTransaction\",\n      params: {\n        message: transaction,\n      },\n    });\n    return signedTransaction as T;\n  }\n\n  public async signAllTransactions<T extends TransactionOrVersionedTransaction>(transactions: T[]): Promise<T[]> {\n    const signedTransactions = await this.provider.request({\n      method: \"signAllTransactions\",\n      params: {\n        message: transactions,\n      },\n    });\n    return signedTransactions as T[];\n  }\n\n  public async signMessage(data: Uint8Array): Promise<Uint8Array> {\n    const response = await this.provider.request<{ message: Uint8Array }, Uint8Array>({\n      method: \"signMessage\",\n      params: {\n        message: data,\n      },\n    });\n    return response as Uint8Array;\n  }\n\n  public async request<T, U>(args: RequestArguments<T>): Promise<U> {\n    const result = await this.provider.request<T, U>(args);\n    return result as U;\n  }\n}\n"],"names":["createChainIdMiddleware","chainId","req","res","next","end","method","result","createProviderConfigMiddleware","providerConfig","createConfigMiddleware","mergeMiddleware","createJsonRpcClient","rpcTarget","fetchMiddleware","createFetchMiddleware","networkMiddleware","createGetAccountsMiddleware","_ref","getAccounts","createAsyncMiddleware","request","response","Error","accounts","undefined","createRequestAccountsMiddleware","_ref2","requestAccounts","createGenericJRPCMiddleware","targetMethod","handler","createSolanaMiddleware","providerHandlers","signTransaction","signAndSendTransaction","signAllTransactions","signMessage","getPrivateKey","getSecretKey","createChainSwitchMiddleware","_ref3","addNewChainConfig","switchSolanaChain","createAccountMiddleware","_ref4","updatePrivatekey","BaseInjectedProvider","BaseProvider","constructor","config","state","chainConfig","_objectSpread","chainNamespace","CHAIN_NAMESPACES","SOLANA","switchChain","_","WalletLoginError","unsupportedOperation","setupProvider","injectedProvider","engine","JRPCEngine","getProviderHandlers","solanaMiddleware","push","configMiddleware","injectedProviderProxy","getInjectedProviderProxy","provider","providerFromEngine","updateProviderEngineProxy","lookupNetwork","update","getBaseProviderHandlers","publicKey","bs58","encode","toBytes","rpcErrors","methodNotSupported","transaction","params","message","sigData","display","signature","_req$params","_req$params2","length","invalidParams","txRes","createInjectedProviderProxyMiddleware","_next","PhantomInjectedProvider","isVersionTransction","version","VersionedTransaction","getSlopeHandlers","getProviderEngineProxy","data","connect","txMessage","invalidRequest","serialize","serializeMessage","PublicKey","decode","addSignature","Buffer","from","providerErrors","custom","code","conn","Connection","sendRawTransaction","_data$signatures","allTxns","unsignedTx","i","item","msg","signatures","SlopeInjectedProxyProvider","bind","getSolflareHandlers","solflareProviderHandlers","SolflareInjectedProvider","getTorusHandlers","_req$params3","sendTransaction","_req$params4","_req$params5","transactions","TorusInjectedProvider","addChain","chainName","displayName","rpcUrls","blockExplorerUrls","blockExplorer","nativeCurrency","name","tickerName","symbol","ticker","decimals","handleInjectedProviderUpdate","setupEngine","connectedChainId","connectedHexChainId","isHexStrict","toString","parseInt","WalletInitializationError","rpcConnectionError","emit","on","configure","privKey","keyPairGenerator","Keypair","fromSecretKey","keyPair","toBase58","secretKey","sign","partialSign","signedMsg","nacl","detached","_providerEngineProxy","sig","encoding","preflightCommitment","_req$params6","txns","tx","SolanaPrivateKeyProvider","enable","privateKey","getEd25519Key","getED25519Key","sk","padStart","getChainSwitchMiddleware","getAccountMiddleware","updateAccount","existingKey","getChainConfig","health","chainSwitchHandlers","chainSwitchMiddleware","accountHandlers","_class","_defineProperty","providerFactory","SolanaWallet","signedTransaction","signedTransactions","args"],"mappings":"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"}